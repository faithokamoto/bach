#!/usr/bin/env python3
"""Find segments where mates map in an allele-biased way.

For each non-filtered biallic SNP in a VCF,
for sample BAM files (assumed to be position-sorted/indexed) in a directory,
split mates by their SNP allele, and find segments with allele bias.

Scan SNP chromosome, counts ref/alt mates for all samples,
and finds consistent bias. Adjacent windows merged.

Heavily based on code written by ChatGPT.
"""

import argparse  # Command-line argument parsing
import csv  # CSV output
import os  # File operations
import pysam  # Reading BAMs and VCF
from scipy.stats import binomtest # Test significance of each biased site

from typing import Dict, List, Tuple

SAMPLE_BAMS = Dict[str, str]
"""Dictionary of {sample name: BAM file name} lookups."""
MATE_POS = Dict[str, List[int]]
"""Dictionary of {ref/alt: [bp mate positions]} for a given sample."""
BIN_COUNTS = Dict[str, List[int]]
"""Dictionary of {ref/alt: [counts of mates in bins]} for a given sample."""
SEGMENT = Tuple[int, int, str, float]
"""Biased segment formatted as `(start, end, bias, p-value)`"""

MBP = 1_000_000
"""Mega base pair (1 million bp)."""

def parse_arguments() -> argparse.Namespace:
    """Parse command line arguments with argparse."""
    parser = argparse.ArgumentParser(description='Find allele-biased segments. '
                                     'Compare mates of reads with SNP alleles.')
    
    parser.add_argument('-p', '--progress', metavar='#',
                        required=False, default=None, type=float,
                        help='Progress update frequency (# variants processed)')
    
    file_args = parser.add_argument_group('filepaths')
    file_args.add_argument('-v', '--vcf', help='Path to the SNP VCF')
    file_args.add_argument('-d', '--bam-dir', help='Directory with BAM files')
    file_args.add_argument('-o', '--output', help='Output CSV path')
    file_args.add_argument('-e', '--bam-ext', metavar='.<ext>',
                           required=False, default='.pos.sorted.bam',
                           help='Extension for BAMs (<sample>.ext) '
                                '[default=".pos.sorted.bam"]')
    
    # Sample/bias count arguments 
    bias_args = parser.add_argument_group('bias parameters')
    bias_args.add_argument('-O', '--max-opposite', metavar='0.*',
                           required=False, default=0, type=float,
                           help='Max share [0,0.5) of heterozygotes '
                                'with opposite bias [default=0]')
    bias_args.add_argument('-N', '--max-neutral', metavar='0.*',
                           required=False, default=0, type=float,
                           help='Max share [0,1) of heterozygotes '
                                'with 0 change [default=0]')
    bias_args.add_argument('-D', '--max-drop', metavar='#',
                           required=False, default=0, type=int,
                           help='Max count of homozygous/missing samples '
                                '[default=0]')
    
    # Window arguments
    window_args = parser.add_argument_group('window parameters')
    window_args.add_argument('-s', '--window-step', metavar='Mbp', type=float, 
                             help='Window step size, in Mbp')
    window_args.add_argument('-w', '--window-width', metavar='#', type=int,
                             help='Minimum window width, as a number of steps')
    
    return parser.parse_args()

def check_illogical_arguments(args: argparse.Namespace) -> None:
    """Run initial argument validity checks."""
    if args.progress is not None and args.progress <= 0:
        raise ValueError(f'Progress print frequency must be positive')
    
    if not os.path.isfile(args.vcf):
        raise FileNotFoundError(f'VCF {args.vcf} does not exist')
    if not os.path.isdir(args.bam_dir):
        raise FileNotFoundError(f'BAM dir {args.bam_dir} is not a directory')
    if not args.bam_ext.endswith('.bam'):
        raise ValueError(f'BAM file extension must end in ".bam"')
    
    if not (0 <= args.max_opposite < 0.5):
        raise ValueError(f'Max opposite samples share ({args.max_opposite}) '
                         'must be in [0, 0.5)')
    if not (0 <= args.max_opposite < 1):
        raise ValueError(f'Max neutral samples share ({args.max_neutral}) '
                         'must be in [0, 1)')
    
    if args.window_width < 1:
        raise ValueError(f'Minimum window width {args.window_width} '
                         'must be at least 1 step')
    
    if args.window_step < 0.5:
        raise ValueError(f'Window step {args.window_step}Mbp must be >=0.5Mbp.')
    if args.window_step >= 10:
        raise ValueError(f'Window step {args.window_step}Mbp is too large. '
                            'Did you enter a vaue in bp instead of Mbp?')
    
def locate_bams(bam_dir: str, bam_ext: str, min_samples: int) -> SAMPLE_BAMS:
    """Find BAM files within given directory.

    Assumes that files are named <sample_name>.<ext>
    
    Parameters
    ----------
    bam_dir : str
        Directory to search within.
    bam_ext : str
        File extension to search for.
    min_samples : int
        The minimum number of samples which should have BAM files.
    
    Returns
    -------
    SAMPLE_BAMS
        BAM files found.
    """

    # Find files given parameters
    bams = {file.split('.')[0]: f'{bam_dir}/{file}'
            for file in os.listdir(bam_dir) if file.endswith(bam_ext)}
    # Verify file quantity
    if not bams:
        raise FileNotFoundError(f'No {bam_dir}/*{bam_ext}')
    if min_samples > len(bams):
        raise ValueError(f'At least {min_samples} sample(s) needed, but there '
                         f'are only {len(bams)} {bam_dir}/*{bam_ext} files')
    return bams

def get_allele_mate_pos(bam_path: str, chrom: str, pos: int, 
                        ref: str, alt: str) -> MATE_POS:
    """Get mate positions for reads supporting ref/alt alleles.

    Ignore reads with unmapped mates and reads that do not cover the SNP.
    BAM file must be position-sorted and indexed for fast random access.

    Parameters
    ----------
    bam_path : str
        Path to the BAM file.
    chrom : str
        Chromosome of the SNP.
    pos : int
        Position of the SNP in bp (0-indexed).
    ref : str
        Reference allele of the SNP.
    alt : str
        Alternate allele of the SNP.

    Returns
    -------
    MATE_POS
        Two lists of bp positions: mates of ref/alt-supporting reads.
    """

    ref_mates = []
    alt_mates = []
    with pysam.AlignmentFile(bam_path, 'rb') as bam_file:
        for read in bam_file.fetch(chrom, pos, pos + 1):
            # Only use mate pairs with high-quality mapping to the same chr
            if (read.is_secondary or read.mate_is_unmapped
                or read.reference_name != read.next_reference_name):
                continue
            
            ref_positions = read.get_reference_positions(full_length=True)
            # Handle deletions of the SNP position
            if pos not in ref_positions: continue
            
            base = read.query_sequence[ref_positions.index(pos)]
            if base == ref:
                ref_mates.append(read.next_reference_start)
            elif base == alt:
                alt_mates.append(read.next_reference_start)
    
    return {'ref': sorted(ref_mates), 'alt': sorted(alt_mates)}

def count_biased_samples(bin_counts: Dict[str, BIN_COUNTS], start: int,
                         end: int) -> Tuple[int, int, int]:
    """Count samples with read mate allele bias within a window.
    
    Parameters
    ----------
    bin_counts : Dict[str, BIN_COUNTS]
        Counts of mates in bins, by sample.
    start : int
        Starting bin index.
    end : int
        Ending bin index.

    Returns
    -------
    ref_count : int
        Number of samples favoring the reference allele.
    alt_count : int
        Number of samples favoring the alternate allele.
    neutral_count : int
        Number of samples with no allele bias.
    """

    ref_count, alt_count, neutral_count = 0, 0, 0

    for sample in bin_counts:
        ref_sum = sum(bin_counts[sample]['ref'][start:end])
        alt_sum = sum(bin_counts[sample]['alt'][start:end])

        if ref_sum > alt_sum: ref_count += 1
        elif alt_sum > ref_sum: alt_count += 1
        else: neutral_count += 1

    return ref_count, alt_count, neutral_count

def bias_type(ref_count: int, alt_count: int, neutral_count: int,
              max_opposite: float, max_neutral: float) -> str:
    """Determine if these bias counts indicate overall bias.
    
    Parameters
    ----------
    ref_count : int
        Number of samples favoring the reference allele.
    alt_count : int
        Number of samples favoring the alternate allele.
    neutral_count : int
        Number of samples with no allele bias.
    max_opposite : float
        Maximum # of samples with opposite bias.
    max_neutral : float
        Maximum # of samples with neutral bias.

    Returns
    -------
    str
        The kind of bias ('ref', 'alt', or 'neutral')
    """

    if neutral_count > max_neutral or min(ref_count, alt_count) > max_opposite:
        return 'neutral'
    else: return 'ref' if ref_count > alt_count else 'alt'

def count_mates_in_bins(mates: MATE_POS, max_pos: int, ignore_pos: int,
                        step: int) -> Dict[str, List[int]]:
    """
    Count mate positions by allele within bins for a given sample.

    Parameters
    ----------
    mates : MATE_POS
        This sample's mates
    max_pos : int
        The maximum position to consider.
    ignore_pos : int
        Position to ignore (set windows containing it to 0).
    step : int
        The bin size.

    Returns
    -------
    dict
        Dictionary mapping sample names to lists of counts per bin.
    """
    bins = list(range(0, max_pos, step))
    bad_bin = (ignore_pos // step, ignore_pos // step + step)
    bin_counts = {sample: [0] * len(bins) for sample in mates}
    
    for sample, positions in mates.items():
        bin_idx = 0
        for pos in positions:
            if bad_bin[0] <= pos <= bad_bin[1]: continue # Skip this read

            while bin_idx < len(bins) - 1 and pos >= bins[bin_idx + 1]:
                bin_idx += 1
            bin_counts[sample][bin_idx] += 1
    
    return bin_counts

def find_biased_windows(bin_counts: Dict[str, BIN_COUNTS], window_width: int,
                        step: int, max_opposite: int, max_neutral: int
                        ) -> List[SEGMENT]:
    """Count samples with read mate allele bias within a window.

    Parameters
    ----------
    bin_counts : Dict[str, BIN_COUNTS]
        Counts of mates in bins, by sample.
    window_width : int
        Minimum number of bins to consider as a window.
    step : int
        The bin size.
    max_opposite : int
        Maximum number of samples with opposite bias.
    max_neutral : int
        Maximum number of neutral samples.

    Returns
    -------
    List[SEGMENT]
        List of biased segments.
    """

    num_bins = len(next(iter(bin_counts.values()))['ref'])
    biased_segments = []
    
    start = 0
    while start < num_bins - window_width + 1:
        end = start + window_width
        ref, alt, neutral = count_biased_samples(bin_counts, start, end)
        bias = bias_type(ref, alt, neutral, max_opposite, max_neutral)
        
        if bias == 'neutral':
            # Move on to the next window
            start += 1
            continue
        
        while end < num_bins:
            r, a, n = count_biased_samples(bin_counts, end, end + 1)
            if bias_type(r, a, n, max_opposite, max_neutral) != bias:
                break
            # Extend window
            end += 1
            ref += r
            alt += a
            neutral += n
            # Don't need to check this start again
            start += 1
        
        n = ref + alt
        k = max(ref, alt)
        p_value = binomtest(k, n, 0.5, alternative='two-sided').pvalue
        
        biased_segments.append((start * step, end * step, bias, p_value))
        # Move on to the next window
        start += 1
    
    return biased_segments

def run_pipeline(bams: SAMPLE_BAMS, max_opposite: float, max_neutral: float,
                 max_drop: int, record: pysam.VariantRecord, chr_length: int,
                 window_width: int, window_step: int) -> List[SEGMENT]:
    """Run mate allele biased segment detection pipeline for a variant.
    
    Parameters
    ----------
    bams : SAMPLE_BAMS
        BAM files to use.
    max_opposite : float
        Maximum % of samples with opposite bias.
    max_neutral : float
        Maximum % of samples without bias.
    max_drop : int
        Maximum # of samples to drop.
    record : pysam.VariantRecord
        Variant to scan for.
    chr_length : int
        Length of this variant's chromosome.
    window_width : int
        Window width, in bp, to use during scanning.
    window_step : int [ default None ]
        Window step, in bp, to use during scanning.
        If None, then read rounding will be used.
    floor_to : int [ default None ]
        What to round read positions to, in Mbp, for window start.
        If None, then window step will be used.

    Returns
    -------
    List[SEGMENT]
        Biased segments found, or None if the variant wasn't tested.
    """

    # Only use high-quality biallelic variants
    if not record.filter or len(record.alts) != 1: return None

    chrom, ref, alt = record.chrom, record.ref, record.alts[0]
    # Convert from 1-index VCF to 0-indexed BAM
    snp_pos = record.pos - 1

    # Only use SNPs
    if len(ref) > 1 or len(alt) > 1: return None

    # Only use heterozygous genotypes
    is_het = {name: s['GT'][0] != s['GT'][1]
              for name, s in record.samples.items()}
    if len(bams) - sum(is_het.values()) > max_drop: return None

    bin_counts = dict()
    for sample, file in bams.items():
        if is_het[sample]:
            mates = get_allele_mate_pos(file, chrom, snp_pos, ref, alt)
            bin_counts[sample] = count_mates_in_bins(
                mates, chr_length, snp_pos, window_step)
    
    # Convert to absolute numbers
    max_opposite_num = int(max_opposite * len(bin_counts))
    max_neutral_num = int(max_neutral * len(bin_counts))
    return find_biased_windows(bin_counts, window_width, window_step,
                               max_opposite_num, max_neutral_num)

if __name__ == '__main__':
    args = parse_arguments()
    check_illogical_arguments(args)
    # At least one more than max_drop samples are needed for worst-case analysis
    bams = locate_bams(args.bam_dir, args.bam_ext, args.max_drop + 1)
    print(f'{len(bams)} BAMs found in {args.bam_dir}/<sample>{args.bam_ext}')

    # Convert step to bp whole number
    window_step = int(args.window_step * MBP)

    # Main logic
    with open(args.output, 'w', newline='') as csvfile:
        writer = csv.writer(csvfile)
        # Header row
        writer.writerow(['CHROM', 'SNP_POS', 'SNP_ID',
                         'BIAS_START_MBP', 'BIAS_END_MBP', 'BIAS', 'P_VALUE'])

        with pysam.VariantFile(args.vcf) as vcf:
            # Ignore VCF samples which don't have BAMs
            vcf.subset_samples(bams.keys())

            # Progress trackers
            total_variants = 0
            variants_dropped = 0
            total_biased_segments = 0

            for record in vcf:
                total_variants += 1
                chr_length = vcf.header.contigs[record.chrom].length

                # Get results for this variant
                biased_segments = run_pipeline(
                    bams, args.max_opposite, args.max_neutral,
                    args.max_drop, record, chr_length, 
                    args.window_width, window_step)
                
                if biased_segments is None: variants_dropped += 1
                else:
                    total_biased_segments += len(biased_segments)
                
                    # Write results for this variant
                    for start, end, bias, p in biased_segments:
                        writer.writerow([record.chrom, record.pos, record.id, 
                                        int(start/MBP), int(end/MBP), bias, p])
                
                if (args.progress is not None 
                    and total_variants % args.progress == 0):
                    print(f'{total_variants} variants processed: '
                          f'{total_variants - variants_dropped} tested, '
                          f'{variants_dropped} dropped')
    
        print(f'{total_variants} variants read from VCF')
        print(f'{total_variants - variants_dropped} non-filtered biallelic SNPs'
              f' with >={len(bams) - args.max_drop} heterozygotes tested')
        print(f'{variants_dropped} other variants dropped')
        print(f'{total_biased_segments} biased segments written to CSV')